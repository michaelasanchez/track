@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style id="dynamic"></style>
<div class="row">
    <div class="col-12">

        <!-- Manage Datasets Tab -->
        <ul class="nav nav-tabs">
            <li class="nav-item mr-2">
                <select id="datasetSelect" class="custom-select selectpicker">
                    @foreach (var label in (Dictionary<int, string>)Model)
                    {
                        <option value="@label.Key" @(label.Key.ToString() == (string)ViewData["lastId"] ? "selected=\"selected\"" : "")>@label.Value</option>
                    }
                </select>
            </li>
            <li class="nav-item mr-auto">
                <a class="nav-link" id="add" href="#tab-add">
                    <i class="fas fa-plus"></i>
                </a>
            </li>
            <li class="nav-item mr-auto">
                <a class="nav-link" id="archive" href="#tab-chart">
                    <i class="fas fa-archive"></i>
                </a>
            </li>
            <li class="nav-item hide">
                <a class="nav-link" id="save" href="#tab-chart">Save</a>
            </li>
            <li class="nav-item hide">
                <a class="nav-link" id="cancel" href="#tab-chart">Cancel</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="edit" href="#tab-settings">Settings</a>
            </li>
        </ul>
    </div>
</div>
<div id="tab-chart" class="active">
    <div class="row">

        <div class="order-2 col-12 col-md-4 col-lg-3 order-lg-1">

            <div class="form-bottom">
                <!-- Create Record ------------------------------ -->
                <h5><a data-toggle="collapse" href="#createRecord">Create Record</a></h5>
                <form id="createRecord" class="collapse show">

                    <!-- Property Inputs -->
                    <div class="form-props"></div>

                    <!-- DateTime Select -->
                    <div class="form-group">
                        <label>Date</label>
                        <input type="text" class="form-control" id="datetimeSelect">
                    </div>

                    <!-- Note Textarea -->
                    <div class="form-group">
                        <label>Note</label>
                        <textarea class="form-control" id="noteTextarea" rows="2"></textarea>
                    </div>

                    <button type="button" id="addRecord" class="btn btn-primary">Add</button>
                </form>

            </div>

        </div>
        <div class="order-1 col-lg-9 order-md-1 order-lg-2">

            <div id="chart-container"></div>

            <div class="wrap">
                <svg id="chart-labels"><g></g></svg>
                <div class="scroll dragscroll">

                    <div class="ct-chart"></div>

                </div>
            </div>

        </div>

    </div>

</div>
<div id="tab-add"></div>
<div id="tab-settings"></div>

<script>

    // Options ------------------------------------------------------------
    var chart;
    var currentDataset;

    var maxProperties = 4;


    // Initialize page ----------------------------------------------------

    // Create Record ----------
    // Datetime Select
    var datetimeChanged = false;
    var focusValue;
    $('#datasetSelect').focus();

    $('#datetimeSelect').datetimepicker();

    $('#datetimeSelect').val(moment(new Date()).format("MM/DD/YYYY h:mm A"));
    refreshTime();

    // Edit Dataset -----------
    var curDatasetLabel;
    var curPropLabels = [];
    var curPropTypes = [];

    //
    $('.nav-link:contains(Cancel)').hide();
    $('.nav-link:contains(Save)').hide();
    $('#archive').parent().hide();

    $.get('@Url.Action("GetDataset", "Home")/' + $('#datasetSelect').val(), function (data)
    {
        currentDataset = JSON.parse(data);
        refreshForm(currentDataset);
        refreshChart(JSON.parse(data), '.ct-chart');
    });


    $(function () {

        // Tabs -------------------------------------------------------------

        // Init - Hide inactive tabs
        $.each($('[id^=tab]:not(.active)'), function (index, value) {
            $(value).hide();
        });

        // Tabs - On Click
        $('.nav .nav-item').click(function (e) {

            var tab = $('.nav-link', this);
            var id = $(tab).prop('id');
            var nextTab = $(tab).attr('href');


            var prevPane = $('[id^=tab].active').first();

            console.log($(prevPane));

            // - SAVE ------------------------------------------------------
            if (id == 'save') {

                var tabId = $(prevPane).attr('id');

                // SAVE - Create Dataset
                if (tabId == 'tab-add') {

                    var datasetLabel = $('#createDatasetLabel').val();

                    var propLabels = [];
                    var propTypes = [];

                    $.each($('input[id^=label]'), function (index, value) {
                        propLabels.push($(value).val());
                    });
                    $.each($('select[id^=type]'), function (index, value) {
                        propTypes.push($(value).val());
                    });

                    var data = {
                        datasetLabel: datasetLabel,
                        labels: propLabels,
                        types: propTypes
                    };

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("CreateDataset", "Home")',
                        traditional: true,
                        data: data
                    });




                    // SAVE Button - Edit Dataset
                }
                else if (tabId == 'tab-settings') {

                    var datasetLabel;

                    if ($('#edit-datasetLabel').hasClass('is-valid'))
                        datasetLabel = $('#edit-datasetLabel').val();

                    var propIds = [];
                    var propLabels = []
                    var propColors = [];

                    $.each($('#editDataset .form-props .form-row'), function (index, value) {

                        if ($('#edit-label-' + index, value).hasClass('is-valid') || $('#edit-color-' + index).hasClass('is-valid')) {
                            var propId = $(value).attr('id');
                            propIds.push(propId.substr(propId.indexOf('-') + 1));
                            propLabels.push($('#edit-label-' + index, value).val());
                            propColors.push($('#edit-color-' + index, value).val());
                        }
                    });

                    var data = {
                        datasetId: $('#datasetSelect').val(),
                        datasetLabel: datasetLabel,
                        ids: propIds,
                        labels: propLabels,
                        colors: propColors
                    }

                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("UpdateDataset", "Home")',
                        traditional: true,
                        data: data
                    })
                        .done(function (data) {
                            $.get('@Url.Action("GetDataset", "Home")/' + $('#datasetSelect').val(), function (data) {
                                currentDataset = JSON.parse(data);
                                refreshForm(currentDataset);
                                refreshChart(JSON.parse(data), '.ct-chart');

                                // Update Dataset Select
                                $('#datasetSelect option:selected').html(currentDataset.label);

                                // Reset Edit Dataset Form
                                $('#editDataset .is-valid').removeClass('is-valid');
                            });
                        });
                }

                // TODO: don't switch tabs until confirmation of new dataset


            }
            // - EDIT -----------------------------------------------------
            else if (id == 'edit') {

                $.get('@Url.Action("EditDatasetView", "Home")', function (html) {
                    $('#tab-settings').html(html);
                })

            // - ADD -----------------------------------------------------
            } else if (id == 'add') {

                $.get('@Url.Action("CreateDatasetView", "Home")', function (html) {
                    $('#tab-add').html(html);
                })

            // - ARCHIVE -----------------------------------------------------
            }
            else if ($(e.currentTarget).attr('id') == 'archive') {


                $('#archiveModal .modal-body p').html('Are you sure you want to archive <strong>' + currentDataset.label + '</strong>?');

                $('#archiveModal .btn-danger').click(function () {

                    //console.log(currentDataset);
                });
                $('#archiveModal').modal();
            }

            // Swap Tabs
            if (nextTab) {

                // Set active tab & inactivate previous tab
                $('.nav-link.active').removeClass('active');
                $(prevPane).removeClass('active').hide();

                $(id).addClass('active');
                $(nextTab).addClass('active').show();

                // Manually show/hide tabs..
                if (nextTab == '#tab-add' || nextTab == '#tab-settings') {
                    if (nextTab == '#tab-add') {
                        $('.nav-link:contains(Settings)').hide();
                    } else if (nextTab == '#tab-settings') {
                        //$('#add').parent().hide();
                    }

                    $('.nav-link:contains(Cancel)').show();
                    $('.nav-link:contains(Save)').show();
                    $('.nav-link:contains(Settings)').hide();

                    $('#datasetSelect').attr('disabled', true);

                } else {
                    $('.nav-link:contains(Cancel)').hide();
                    $('.nav-link:contains(Save)').hide();
                    $('.nav-link:contains(Settings)').show();

                    $('#datasetSelect').attr('disabled', false);
                }
            }
        });


        // Create Dataset ---------------------------------------------------

        //
        $('.dropdown-toggle').dropdown();

        $('.dropdown-item').click(function (e) {
            var base = $(e.target).parent().parent();

            if ($('input[type=text]', base).length) {
                $('input[type=text]', base).val($(e.target).html());
            } else {
                $('.dropdown-toggle', base).html($(e.target).html());
            }

        });

    });


    // Events --------------------------------------------------------------

    // Dataset Select - On Change
    $('#datasetSelect').change(function (e) {
        $.get('@Url.Action("GetDataset", "Home")/' + $('#datasetSelect').val(), function (data)
        {
            currentDataset = JSON.parse(data);
            var html = refreshForm(currentDataset);

            refreshChart(JSON.parse(data), '.ct-chart');
        });
    });

    // Create Record
    $('#addRecord').click(function (e)
    {
        var datasetId = $('#datasetSelect').val();
        var datetime = $('#datetimeSelect').val();
        var labels = [];
        var values = [];

        // Use current time is input in unchanged
        var now = new Date();
        if (datetime == moment(now).format("MM/DD/YYYY h:mm A")) {
            datetime = moment(now).format("MM/DD/YYYY hh:mm:ss a");
        }

        var formProps = $('#createRecord .form-props .form-group');

        for (var i = 0; i < formProps.length; i++) {
            var label = $('label', formProps[i]).html();
            var value = $('.form-control', formProps[i]).val();
            $('.form-control', formProps[i]).val('');

            labels.push(label);
            values.push(value);
        }

        var note = $('#noteTextarea').val();

        var data = {
            "id": datasetId,
            "datetime": datetime,
            "labels": labels,
            "values": values,
            "note": note
        };

        $.ajax({
            type: 'POST',
            url: '@Url.Action("SaveRecord", "Home")',
            traditional: true,
            data: data
        })
            .done(function (data) {

                $.get('@Url.Action("GetDataset", "Home")/' + $('#datasetSelect').val(), function (data)
                {
                    refreshChart(JSON.parse(data), '.ct-chart');
                });
            });

        return false;
    });

    // Datetime Select
    $('#datetimeSelect').focus(function (e) {
        focusValue = $(this).val();
    })
    $('#datetimeSelect').focusout(function (e) {
        if (focusValue != null && $(this).val() != focusValue) {
            datetimeChanged = true;
            console.log('changed');
        }
        focusValue = null;
    });


    // No Clue!
    $('#manageDatasets').click(function (e) {
        //$('.multi-collapse').hasClass('show') ? $('.form-top').removeClass('show') : $('.form-top').addClass('show');
    });


    // Refresh Create Record Form DateTime field
    function refreshTime() {

        var now = moment(new Date()).format("MM/DD/YYYY h:mm A");

        if (focusValue == null && !datetimeChanged && $('#datetimeSelect').val() != now) {
            $('#datetimeSelect').val(now);
        }

        setTimeout(refreshTime, 1000);
    }

    // Refresh Create Record Form
    function refreshForm(dataset) {

        var html = '';

        for (var i = 0; i < dataset.series.length; i++) {

            // Add series field
            html += '<div class="form-group"><label>' + dataset.series[i] + '</label><input type="text" class="form-control" id="prop-' + i + '"></div>';
        }

        $('#createRecord .form-props').html(html);
    }

    // Refresh Chart
    function refreshChart(dataset, selecter) {

        //console.log(dataset);

        // Create Chartist data object
        var data = {
            //labels: []
            series: []
        }

        // Chartist data
        if (dataset != null) {

            // Populate first data object
            for (var i = 0; i < dataset.series.length; i++) {

                data.series.push({
                    name: dataset.series[i],
                    data: []
                });

                for (var j = 0; j < dataset.records.length; j++) {
                    data.series[i].data.push({
                        meta: (dataset.notes[j] == null) ? '' : dataset.notes[j],
                        x: new Date(dataset.records[j]),
                        y: dataset[dataset.series[i]][j]
                    });

                }
            }
        }

        // Chartist options
        var options = {
            axisX: {
                type: Chartist.FixedScaleAxis,
                divisor: Math.round(Math.max(1, parseInt(dataset.span) / 30)),
                labelInterpolationFnc: function (value) {
                    return moment(value).format('MMM');
                }
            },
            chartPadding: {
                left: 0,
                //right: 20
            },
            fullWidth: true,
            plugins: [
                Chartist.plugins.tooltip({
                    tooltipOffset: {
                        x: $('.scroll')[0].scrollLeft,
                    },
                    transformTooltipTextFnc: function (val) {

                        var coords = val.split(',');
                        val = coords[0] + ' - ' + coords[1];

                        return val;
                    }
                })
            ],
            showGridBackground: false
        };


        // Resize Chart
        var span = parseInt(dataset.span);

        //console.log("span: " + span + "; w: " + span * 2 + "; cw: " + $('.scroll')[0].clientWidth + "; d:" + Math.max(1, span / 30));

        if (span) {
            if (span * 2 < $('.scroll')[0].clientWidth) {
                $('.ct-chart').css('width', $('.scroll')[0].clientWidth);
            } else {
                $('.ct-chart').css('width', span * 2);
            }
        } else {
            $('.ct-chart').css('width', $('.scroll')[0].clientWidth);
        }


        // Render new graph
        if (!chart) {
            chart = new Chartist.Line(selecter, data, options);
        } else {
            chart.update(data, options);
        }

        // Move vertical labels
        $.each($('#chart-labels g').children(), function (i, val) {
            $(val).remove();
        })
        checkLabels();

        // Update chart colors
        var sp = 'abcdefghij';
        var css = '';
        for (var c in currentDataset.colors) {
            var prefix = sp.substr(c, 1);
            css += '.ct-series-' + prefix + ' .ct-point, .ct-series-' + prefix + ' .ct-line { stroke: #' + currentDataset.colors[c] + '; }';
        }
        $('style#dynamic').html(css);

        // Scroll chart to right edge
        $('.scroll')[0].scrollLeft = $('.scroll')[0].scrollWidth - $('.scroll')[0].clientWidth;
    }


    // Check is vertical Chart labels have appeared
    function checkLabels() {

        var vertLabels = $('.ct-start').parent();
        $.each($(vertLabels), function (id, value) {
            $(value).attr('y', parseInt($(value).attr('y')) + 20);
        });

        if (!vertLabels.length) {
            setTimeout(checkLabels, 100);
        } else {
            $('#chart-labels g').append($(vertLabels));
        }
    }

</script>
